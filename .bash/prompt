#!/usr/bin/env bash
#
#   ~/.bash/prompt
#
#   Dedicated file for setting prompt.
#   For bulky customizations. Sourced by ~/.bashrc.
#
#   Neel Yadav
#   06.30.2021


# ————— GIT REPO DETAILS —————————————————————————————————————————————
# Credit for these two functions goes to a website guide I copied them
# from or something, don't remember which one exactly though, but I'm
# pretty sure I modified them for my use anyways.

# get branch
get_git () {
	BRANCH=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
	if [ ! "${BRANCH}" == "" ]
	then
		STAT="$(stat_git)"
		echo "[${BRANCH}${STAT}] "
	else
		echo ""
	fi
}

# get status
stat_git () {
	status=$(git status 2>&1 | tee)
	dirty=$(echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?")
	untracked=$(echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?")
	ahead=$(echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?")
	newfile=$(echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?")
	renamed=$(echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?")
	deleted=$(echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?")
	bits=''
	if [ "${renamed}" == "0" ]; then
		bits=">${bits}"
	fi
	if [ "${ahead}" == "0" ]; then
		bits="*${bits}"
	fi
	if [ "${newfile}" == "0" ]; then
		bits="+${bits}"
	fi
	if [ "${untracked}" == "0" ]; then
		bits="?${bits}"
	fi
	if [ "${deleted}" == "0" ]; then
		bits="x${bits}"
	fi
	if [ "${dirty}" == "0" ]; then
		bits="!${bits}"
	fi
	if [ ! "${bits}" == "" ]; then
		echo " ${bits}"
	else
		echo ""
	fi
}


# ————— ITERM2 ———————————————————————————————————————————————————————
# The only feature of iTerm2's shell integration that I really need is
# the ability to use keyboard shortcuts to jump up & down through the
# command history by automatically moving the window scroll to show
# the line where the prev/next command was entered (skipping over any
# intermediate console output). So in order to use that feature on its
# own, I've copied these 3 functions from iTerm's shell integration
# script in order to directly integrate them into my custom prompt.

# Prefix: before everything else
iterm2_prompt_prefix () {
    printf "\033]" # iterm2_begin_osc
    printf "133;D;\$?"
    printf "\007" # iterm2_end_osc
}

# Mark: before the prompt, after the prefix
iterm2_prompt_mark () {
    printf "\033]" # iterm2_begin_osc
    printf "133;A"
    printf "\007" # iterm2_end_osc
}

# Suffix: after everything else
iterm2_prompt_suffix () {
    printf "\033]" # iterm2_begin_osc
    printf "133;B"
    printf "\007" # iterm2_end_osc
}


# ————— CUSTOM ———————————————————————————————————————————————————————
# Additional custom-made prompt functionality

# outputs a superscript number indicating how many shells deep you are (if > 1)
sh_depth () {
    if [[ $SHLVL -gt 1 ]]; then
        echo $SHLVL | sed 'y/0123456789/⁰¹²³⁴⁵⁶⁷⁸⁹/'
    fi
}


# ————— PROMPT ———————————————————————————————————————————————————————
# Finally putting all the pieces together into the actual prompt

# assemble the prompt
prompt_user=$(id -u)
_PS1='\[\e[0;1;37m\]'

# conditional styling for user/host text
if [[ $prompt_user == 501 ]]; then
    _PS1+='\h'
elif [[ $prompt_user == 0 ]]; then
    _PS1+="\[${red}\]\u\[${white}\]@\[${_PS1}\]\h"
else
    _PS1+='\u@\h'
fi

# add the rest of the prompt
_PS1+=' \[\e[0;1;34m\]\W \[\e[0;2;37m\]$(get_git)\[\e[0;1;35m\]❯\[\e[0;90m\]$(sh_depth)\[\e[0m\] '

# make container for the prompt
prompt_prefix="$(iterm2_prompt_prefix)$(iterm2_prompt_mark)"
prompt_suffix="$(iterm2_prompt_suffix)"

# pack and ship the prompt
PS1="\[${prompt_prefix}\]${_PS1}\[${prompt_suffix}\]"

# buy one get one free prompt
PS2='\[\e[2m\]⑊\[\e[0m\] '
