#!/usr/bin/env bash
#
#   ~/.bash/colors
#
#   ANSI color code variables.
#   Convenient escape characters for applying color/styling to
#   output text in the terminal. Used in ~/.bash/prompt and
#   else where; sourced by ~/.bashrc.
#
#   Neel Yadav
#   07.03.2021


# ————— BASIC ESCAPE CODE GUIDE ——————————
#       30's  =>  foreground normal
#       90's  =>  foreground bright
#       40's  =>  background normal
#      100's  =>  background bright
#     0;[x]m  =>  reset all, apply x
#       [x]m  =>  use prior, apply x
#   [y];[x]m  =>  use prior, apply both x & y


# ————— TEXT STYLES ——————————————————————

export reset="\e[0m"
export bold="\e[1m"
export dim="\e[2m"
export italic="\e[3m"
export under="\e[4m"
export blink="\e[5m"
export reverse="\e[7m"
export invisible="\e[8m"
export strike="\e[9m"

# ————— FOREGROUND ———————————————————————

export black="\e[0;30m"
export red="\e[0;31m"
export green="\e[0;32m"
export yellow="\e[0;33m"
export blue="\e[0;34m"
export magenta="\e[0;35m"
export cyan="\e[0;36m"
export white="\e[0;37m"

# ————— BRIGHT FOREGROUND ————————————————
#   The terms light & bright are used interchangably and the l-color
#   variables (lblue, lred, etc.) use l for "light" as a prefix instead
#   of b for "bright" because it's easier to distinguish.

export lblack="\e[0;90m"
export lred="\e[0;91m"
export lgreen="\e[0;92m"
export lyellow="\e[0;93m"
export lblue="\e[0;94m"
export lmagenta="\e[0;95m"
export lcyan="\e[0;96m"
export lwhite="\e[0;97m"

# ————— BACKGROUND ———————————————————————

export black_bg="\e[40m"
export red_bg="\e[41m"
export green_bg="\e[42m"
export yellow_bg="\e[43m"
export blue_bg="\e[44m"
export magenta_bg="\e[45m"
export cyan_bg="\e[46m"
export white_bg="\e[47m"

# ————— BRIGHT BACKGROUND ————————————————

export lblack_bg="\e[100m"
export lred_bg="\e[101m"
export lgreen_bg="\e[102m"
export lyellow_bg="\e[103m"
export lblue_bg="\e[104m"
export lmagenta_bg="\e[105m"
export lcyan_bg="\e[106m"
export lwhite_bg="\e[107m"


# ———————————————————————————————————————————————————————————————————— #
# ————— COLOR/STYLE USAGE EXAMPLES ——————————————————————————————————— #
# ———————————————————————————————————————————————————————————————————— #


# ————— BASIC ————————————————————————————

## Bold Text
# echo -e "${red}${bold}Such red, much bold.${reset}"

## Strikthrough Text
# echo -e "${green}${strike}Such green, much strike.${reset}"

## Blinking Text
# echo -e "${blue}${blink}Such blue, much blink.${reset}"


# ————— FORE/BACKGROUND COMBOS ———————————

## Black text, no style, white background
# echo -e "${black}${white_bg}Black on white${reset}"

## White text, italics, blue background
# echo -e "${white}${italic}${blue_bg}A lot going on in this text...${reset}"

## Yellow text, bold, italics, blinking, underlined, bright green background
# echo -e "${yellow}${bold}${italic}${blink}${strike}${lgreen_bg}Turn the dial up to 'information overload'.${reset}"


# ————— SEGMENTED RESETS —————————————————

## Italics red text, emphasis with underline and bold
# echo -e "${red}${italic}Italics red text, ${reverse}${bold}emphasis${reset} ${red}${italic}with ${bold}bold${reset} ${red}${italic}and ${reverse}highlight${reset}"

## NOTE: The ${reset} clears all previous style, it's not needed if you
##       you're about to change (or restate) the text color because the
##       the basic foreground color codes auto-resets previous trailing
##       styles. At the minimum, you should add the ${reset} var to the
##       end of your total ouput, otherwise you might end up seeing some
##       weird effects in your terminal afterwords.

## NOTE: The exact colors associated with the 16 ANSI variables depend on
##       what theme you use with your specific console/terminal emulator.
##       And the "bright" colors may also be set to automatically appear
##       bolded, though there's usually a setting to enable/disable that
##       setting in applications like the default macOS Terminal.app and
##       the 3rd party alternative, iTerm2.
